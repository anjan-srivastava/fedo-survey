'use strict';

(function() {
    var MAX_RATING = 5,
        init; // actual content loader

    var reviews = #{reviews}, /***** part of template ****/
        config = #{config};

 
    // defines context for iframe container
    // NOTE! this function morphs document and window property
    init = function (document, window) {
     
                        
                    /**
         * returns wrapper around HTMLNode
         * @param selector a css selector string
         *        ; for now only class selector is implemented
         *
         * TODO for now parsing/checks are not implemented.
         */

        /*==== start: utilities ===*/
        var onode = function (selector) {
            var _Onode;

            // internal class implementation
            _Onode = function() {
                this.domNode = null;
                this.render(selector);
            };

            // returns ONode object
            _Onode.prototype.render = function(selector) {
                var parts = selector.split('.'),
                    node = document.createElement(parts[0]);
                    
                parts.slice(1).forEach(function(cl) {
                    node.className += cl + " ";
                });

                this.domNode = node;
                return this; 
            };
            
            // appends given _Onode.domNode as child node of this _Onode.domNode
            _Onode.prototype.append = function(selectors) {
                if (this.domNode != null) {
                    if (typeof selectors.render === "function") {
                        this.domNode.appendChild(selectors.domNode); 
                    } else {
                        if (typeof selectors === "string") selectors = [selectors];
                        for (var i=0;i<selectors.length;i+=1) {
                            var selector = selectors[i],
                                aNode = onode(selector);
                            this.domNode.appendChild(aNode.domNode);
                        }
                    }
                }

                return this;
            };


            // adds inner text to domNode
            _Onode.prototype.text = function(t) {
                this.domNode.appendChild(document.createTextNode(t));
                return this;
            };

            _Onode.prototype.attr = function(key, value) {
                if (this.domNode != null) {
                    this.domNode[key] = value;
                }

                return this;
            };


            return new _Onode();
        };

        /*==== end: utilities ===*/

        /*==== start: renderers ===*/
        
        var mainCont = document
            .getElementById('outreech-widget-container');

        var renderReview,
            renderWidget,
            setupActions,
            setupStyles;

        
        renderReview = function(model) {
            var renderRating,
                renderTitle,
                renderCardHead,
                renderCardContent,
                renderCard;

           
            // returns ONode for rating
            renderRating = function() {
                var rating = parseInt(model.rating),
                    nd = onode('div'),
                    stars = [],
                    i;

                for (i=0;i<rating;i+=1) stars.push('i.fa.fa-star.filled');
                for (i=rating;i<MAX_RATING;i+=1) stars.push('i.fa.fa-star.empty');

                return nd.append(stars);
            };

            renderTitle = function() {
                var nameNode = onode('div').text(model.user.name);
                if (!config.settings.showReviewerName) nameNode.attr('style', 'display:none');
                return onode('div.title.clearfix').append(nameNode).append(renderRating());
            };

            renderCardHead = function() {
                var reviewDate = onode('div.extra').text(model.date);
                if (!config.settings.showReviewDate) reviewDate.attr('style', 'display:none');
                return onode('h5.clearfix')
                       .append(renderTitle())
                       .append(reviewDate);
            };

            renderCardContent = function() {
                var rt = onode('p');
                if (model.content.media &&
                        model.content.media.length) {
                    rt.append(onode('img').attr('src', model.content.media[0]));
                }

                if (model.content.text && model.content.text.length)
                    rt.append(onode('q').text(model.content.text));

                return rt;
            };


            renderCard = function() {
                return onode('div.orw-card')
                        .append(onode('div.widget-title')
                                .append(onode('span').text('What people say about our product!'))
                                .append(onode('i.fa.close')))
                        .append(renderCardHead())
                        .append(renderCardContent())
                        .append(onode('div.poweredByText').append(
                            onode('span')
                                .append('i.fa.fa-bolt')
                                .append(onode('a').attr('href', 'http://outreech.io').attr('target', 'blank').text('by OutReech'))));
            };



            return onode('div.orw-card-w')
                    .append(renderCard())
        };



        renderWidget = function(reviews) {
            var slider = onode('div.siema'),
                i, rt, pagxn, cnt,
                favIcon = onode('div.fa.fa-heart.head');

            if (config.settings.position) favIcon.domNode.style.right = 0;

            for(i=0;reviews && (i<reviews.length);i+=1)
                slider.append(renderReview(reviews[i]));

            cnt = onode('div.content')
                                .append(onode('div')
                                    .append(onode('div.action.left.ic-chevron-left'))
                                    .append(slider)
                                    .append(onode('div.action.right.ic-chevron-right'))
                                    //.append(pagxn)
                                );

            rt = onode('div')
                    .append(favIcon)
                    .append(cnt);

            if (!(reviews && reviews.length && config.settings.enabled)) {
                rt.attr('style', 'display:none;');
            }

            return rt;
        };

        /*==== end: renderers ===*/


        setupActions = function(widgetNode) {
            // load slider script
            widgetNode.append(onode('script').attr('src', '#{staticUrl}/siema.min.js').attr('onload', function() {
                var currentSlide = 0,
                    lastSlideIndex = document.getElementsByClassName('orw-card').length - 1,
                    autoHeight = function() {
                        var slider = document.getElementsByClassName('siema')[0];
                        var slides = slider.childNodes[0].childNodes;
                        var i;
                        for (i=0; i<slides.length; i+=1) {
                            if (this.currentSlide == i) {
                                slider.style.height = window.getComputedStyle(slides[i]).height;
                                break;
                            }
                        }

                        
                        var prev = document.getElementsByClassName('action left')[0],
                            next = document.getElementsByClassName('action right')[0],
                            paginationDots = document.getElementsByClassName('dot'),
                            disabledCls = "disabled";


                        prev.classList.remove(disabledCls);
                        next.classList.remove(disabledCls);
                        
                        window.console.log('slide', this.currentSlide);
                        if (this.currentSlide == 0) {
                            prev.classList.add(disabledCls);
                        }
                        
                        if (this.currentSlide == lastSlideIndex) {
                            next.classList.add(disabledCls);
                        }

                        for (i=0;i<paginationDots.length; i+=1) {
                            paginationDots[i].classList.remove('active');
                            if (this.currentSlide == i) {
                                paginationDots[i].classList.add('active');
                            }
                        }
                    };

                var siema = new window.Siema({
                    duration: 200,
                    onInit: function() { var that=this; window.setTimeout(function() { autoHeight.apply(that, null); }, 1000)},
                    onChange: function() { autoHeight.apply(this, null); currentSlide = this.currentSlide; }
                });

                document.getElementsByClassName('action left')[0]
                    .addEventListener('click', function(e) { siema.prev() }, false);

                document.getElementsByClassName('action right')[0]
                    .addEventListener('click', function(e) { siema.next() }, false);
                
                var head = widgetNode.domNode.getElementsByClassName('head')[0],
                    content = widgetNode.domNode.getElementsByClassName('content')[0],
                    close = widgetNode.domNode.getElementsByClassName('close'),
                    autoScroll = function() {
                        var handle,
                            play = function() { handle = window.setInterval(function() { if (currentSlide == lastSlideIndex) siema.goTo(0); else  siema.next(); }, 5000); },
                            pause = function() { window.clearInterval(handle); }
                        return function (enabled) {
                            if (enabled) play();
                            else pause();
                        };
                    }();

                if (config.settings.defaultState) {
                    head.style.display = 'none';
                    content.style.clip = 'rect(0px 340px 340px 0px)';
                    if (config.settings.scrollEnabled) autoScroll(true);
                } else {
                    content.style.visibility = 'hidden';
                    content.style.opacity = 0;
                    content.style.clip = 'rect(306px 34px 340px 0px)';
                }

                Array.from(close).forEach(function (elem) {
                    elem.addEventListener('click', function(e) {
                        content.style.opacity = 0;
                        content.style.clip = 'rect(306px 34px 340px 0px)';

                        window.setTimeout(function() {
                            content.style.visibility = "hidden";
                            head.style.display = "block";
                        }, 400);
                    
                        autoScroll(false);    
                    }, false);
                });

                head.addEventListener('click', function(e) {
                    head.style.display = "none";
                    content.style.visibility = "visible";
                    content.style.opacity = 1;
                    content.style.clip = 'rect(0px 340px 340px 0px)';

                    if (config.settings.scrollEnabled) autoScroll(true);
                }, false);


                mainCont.style.visibility = 'visible';
            }));

            

        };

        setupStyles = function() {
            document.head.appendChild(
                onode('link')
                .attr('rel', 'stylesheet')        
                .attr('href', 'https://fonts.googleapis.com/css?family=Roboto:100,300,400,500')
                .domNode
            ); 
            document.head.appendChild(
                onode('link')
                .attr('rel', 'stylesheet')        
                .attr('href', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css')
                .domNode
            ); 
            
            document.head.appendChild(
                onode('link')
                .attr('rel', 'stylesheet')        
                .attr('href', '#{staticUrl}/widget.css')
                .domNode
            ); 


            // apply customization changes by user
            // 1. background color
            Array.from(document.getElementsByClassName('orw-card')).forEach(function(elem) {
                elem.style.backgroundColor = config.design.backgroundColorOpen;
            });
            // 2. Font color
            Array.from(document.getElementsByTagName('q')).forEach(function (elem) {
                elem.style.color = config.design.fontColor;
            });
            // 3. Rating Icon color
            Array.from(document.getElementsByClassName('fa-star filled')).forEach(function (elem) {
                elem.style.color = config.design.ratingIconColor;
            });
            // 4. Fav Icon Color
            Array.from(document.getElementsByClassName('head')).forEach(function (elem) {
                elem.style.color = config.design.outreechFavColor;
            });


        };  

        // render and mount widget
        var widget = renderWidget(reviews);
        try {

            mainCont.style.visibility = 'hidden';
            mainCont.style.width = '343px'; // this is important for slider to work correctly.
            mainCont.appendChild(widget.domNode);
        } catch (e) { /*ignore*/ }

        setupActions(widget);
        // load styles
        setupStyles();
        
    }; //************* `init` context ends here ************
 


    // setup every thing in iframe
    var iframe = document.createElement('iframe');
    iframe.width = 340;
    iframe.height = 340;
    iframe.src = 'about:blank';
    iframe.style = 'border:none;position:fixed;overflow:hidden;bottom:35px;';

    // Positioning of widget  
    if (config.settings.position) { //right
        iframe.style.right = '35px';
    } else {
        iframe.style.left = '35px';
    }
 
    iframe.onload = function() {
        var iframeWindow = iframe.contentWindow, iframeDoc = iframeWindow.document;

        iframeDoc.open();
        iframeDoc.write("<html><body style='overflow:hidden'><div id='outreech-widget-container' class='place-bottom-left'></div></body></html>");
        iframeDoc.close();

        init(iframeDoc, iframeWindow);

        // only now append to parent dom
    };
   
    document.body.appendChild(iframe);
}());
